"use client"

import { useState, useEffect } from "react"
import { useSeoAudit } from "@/contexts/seo-audit-context"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Search, ExternalLink, Loader2, RefreshCw, Filter, ArrowDown, ArrowUp, Info } from "lucide-react"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "@/components/ui/pagination"

type PageData = {
  url: string
  status_code: number
  meta?: {
    title?: string
    description?: string
    h1?: string[]
    canonical?: string
    content?: {
      plain_text_word_count?: number
      size?: number
    }
  }
  onpage_score?: number
  checks?: {
    canonical?: {
      status: string
      value?: string
    }
    meta_robots?: {
      status: string
      value?: string
    }
    h1?: {
      status: string
      count?: number
    }
    title?: {
      status: string
      length?: number
    }
    description?: {
      status: string
      length?: number
    }
    is_https?: boolean
    is_4xx_code?: boolean
    is_5xx_code?: boolean
    is_broken?: boolean
    is_redirect?: boolean
  }
  fetch_time?: string
  internal_links_count?: number
  external_links_count?: number
  images_count?: number
  images_size?: number
  scripts_count?: number
  scripts_size?: number
  stylesheets_count?: number
  stylesheets_size?: number
  total_transfer_size?: number
  page_timing?: {
    time_to_interactive?: number
    dom_complete?: number
    largest_contentful_paint?: number
  }
}

export function SiteAuditPages() {
  const { siteAuditPages, activeSiteAuditTask, loadSiteAuditPages, siteAuditLoading } = useSeoAudit()
  const [searchTerm, setSearchTerm] = useState("")
  const [filteredPages, setFilteredPages] = useState<PageData[]>(siteAuditPages || [])
  const [sortField, setSortField] = useState<string>("onpage_score")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [currentPage, setCurrentPage] = useState(1)
  const [pageSize, setPageSize] = useState(10)
  const [filterStatus, setFilterStatus] = useState<string>("all")

  // Filter and sort pages when search term, pages, sort field, or sort direction changes
  useEffect(() => {
    if (!siteAuditPages) return

    let filtered = [...siteAuditPages] as PageData[]

    // Apply status filter
    if (filterStatus !== "all") {
      if (filterStatus === "200") {
        filtered = filtered.filter(page => page.status_code === 200)
      } else if (filterStatus === "3xx") {
        filtered = filtered.filter(page => page.status_code >= 300 && page.status_code < 400)
      } else if (filterStatus === "4xx") {
        filtered = filtered.filter(page => page.status_code >= 400 && page.status_code < 500)
      } else if (filterStatus === "5xx") {
        filtered = filtered.filter(page => page.status_code >= 500)
      }
    }

    // Apply search filter
    if (searchTerm.trim() !== "") {
      const term = searchTerm.toLowerCase()
      filtered = filtered.filter(
        (page) =>
          page.url.toLowerCase().includes(term) ||
          (page.meta?.title && page.meta.title.toLowerCase().includes(term)) ||
          (page.meta?.description && page.meta.description.toLowerCase().includes(term)),
      )
    }

    // Apply sorting
    filtered.sort((a, b) => {
      let valueA: any = null
      let valueB: any = null

      // Handle nested properties
      if (sortField === "onpage_score") {
        valueA = a.onpage_score || 0
        valueB = b.onpage_score || 0
      } else if (sortField === "word_count") {
        valueA = a.meta?.content?.plain_text_word_count || 0
        valueB = b.meta?.content?.plain_text_word_count || 0
      } else if (sortField === "title_length") {
        valueA = a.meta?.title?.length || 0
        valueB = b.meta?.title?.length || 0
      } else if (sortField === "description_length") {
        valueA = a.meta?.description?.length || 0
        valueB = b.meta?.description?.length || 0
      } else if (sortField === "status_code") {
        valueA = a.status_code || 0
        valueB = b.status_code || 0
      } else {
        // Default to URL if sort field is not recognized
        valueA = a.url || ""
        valueB = b.url || ""
      }

      // Compare values based on sort direction
      if (sortDirection === "asc") {
        return valueA > valueB ? 1 : -1
      } else {
        return valueA < valueB ? 1 : -1
      }
    })

    setFilteredPages(filtered)
  }, [searchTerm, siteAuditPages, sortField, sortDirection, filterStatus])

  // Load data when component mounts
  useEffect(() => {
    if (activeSiteAuditTask && !siteAuditPages) {
      loadSiteAuditPages(activeSiteAuditTask)
    }
  }, [activeSiteAuditTask, siteAuditPages, loadSiteAuditPages])

  // Reload data if needed
  const handleReload = () => {
    if (activeSiteAuditTask) {
      loadSiteAuditPages(activeSiteAuditTask)
    }
  }

  // Handle sort change
  const handleSort = (field: string) => {
    if (sortField === field) {
      // Toggle direction if same field
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      // Set new field and default to descending
      setSortField(field)
      setSortDirection("desc")
    }
  }

  // Calculate pagination
  const totalPages = Math.ceil(filteredPages.length / pageSize)
  const startIndex = (currentPage - 1) * pageSize
  const endIndex = startIndex + pageSize
  const currentPageData = filteredPages.slice(startIndex, endIndex)

  // Generate pagination items
  const paginationItems = []
  const maxPagesToShow = 5
  let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2))
  let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1)

  if (endPage - startPage + 1 < maxPagesToShow) {
    startPage = Math.max(1, endPage - maxPagesToShow + 1)
  }

  for (let i = startPage; i <= endPage; i++) {
    paginationItems.push(
      <PaginationItem key={i}>
        <PaginationLink
          isActive={currentPage === i}
          onClick={() => setCurrentPage(i)}
        >
          {i}
        </PaginationLink>
      </PaginationItem>
    )
  }

  if (siteAuditLoading) {
    return (
      <Card className="p-6">
        <div className="flex flex-col items-center justify-center space-y-4 py-8">
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-r from-blue-400/20 via-purple-400/20 to-pink-400/20 rounded-full blur-xl opacity-70 h-16 w-16 animate-pulse" />
            <div className="relative z-10 flex items-center justify-center">
              <Loader2 className="h-8 w-8 text-[#0071e3] animate-spin" />
            </div>
          </div>
          <p className="text-center text-muted-foreground">Loading pages data...</p>
        </div>
      </Card>
    )
  }

  if (!siteAuditPages || siteAuditPages.length === 0) {
    return (
      <Card className="p-6">
        <div className="flex flex-col items-center justify-center space-y-4 py-8">
          <p className="text-center text-muted-foreground">No pages data available</p>
          <Button onClick={handleReload} className="bg-[#0071e3] hover:bg-[#0077ed] transition-colors">
            Load Pages Data
          </Button>
        </div>
      </Card>
    )
  }

  return (
    <Card>
      <div className="p-4 border-b">
        <div className="flex flex-col md:flex-row md:items-center space-y-2 md:space-y-0 md:space-x-2">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search pages..."
              className="pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="flex items-center space-x-2">
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-[140px]">
                <div className="flex items-center">
                  <Filter className="mr-2 h-4 w-4" />
                  <SelectValue placeholder="Status" />
                </div>
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="200">200 OK</SelectItem>
                <SelectItem value="3xx">3xx Redirect</SelectItem>
                <SelectItem value="4xx">4xx Error</SelectItem>
                <SelectItem value="5xx">5xx Error</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={pageSize.toString()} onValueChange={(value) => setPageSize(parseInt(value))}>
              <SelectTrigger className="w-[80px]">
                <SelectValue placeholder="10" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="10">10</SelectItem>
                <SelectItem value="25">25</SelectItem>
                <SelectItem value="50">50</SelectItem>
                <SelectItem value="100">100</SelectItem>
              </SelectContent>
            </Select>
            
            <Button variant="outline" size="sm" onClick={handleReload}>
              <RefreshCw className="h-4 w-4 mr-1" />
              Refresh
            </Button>
          </div>
        </div>
        <p className="mt-2 text-sm text-muted-foreground">
          Showing {startIndex + 1}-{Math.min(endIndex, filteredPages.length)} of {filteredPages.length} pages (filtered from {siteAuditPages.length} total)
        </p>
      </div>
      <ScrollArea className="h-[600px]">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="cursor-pointer" onClick={() => handleSort("url")}>
                <div className="flex items-center">
                  URL
                  {sortField === "url" && (
                    sortDirection === "asc" ? <ArrowUp className="ml-1 h-4 w-4" /> : <ArrowDown className="ml-1 h-4 w-4" />
                  )}
                </div>
              </TableHead>
              <TableHead className="cursor-pointer" onClick={() => handleSort("status_code")}>
                <div className="flex items-center">
                  Status
                  {sortField === "status_code" && (
                    sortDirection === "asc" ? <ArrowUp className="ml-1 h-4 w-4" /> : <ArrowDown className="ml-1 h-4 w-4" />
                  )}
                </div>
              </TableHead>
              <TableHead className="cursor-pointer" onClick={() => handleSort("title_length")}>
                <div className="flex items-center">
                  Title
                  {sortField === "title_length" && (
                    sortDirection === "asc" ? <ArrowUp className="ml-1 h-4 w-4" /> : <ArrowDown className="ml-1 h-4 w-4" />
                  )}
                </div>
              </TableHead>
              <TableHead className="cursor-pointer" onClick={() => handleSort("word_count")}>
                <div className="flex items-center">
                  Words
                  {sortField === "word_count" && (
                    sortDirection === "asc" ? <ArrowUp className="ml-1 h-4 w-4" /> : <ArrowDown className="ml-1 h-4 w-4" />
                  )}
                </div>
              </TableHead>
              <TableHead className="text-right cursor-pointer" onClick={() => handleSort("onpage_score")}>
                <div className="flex items-center justify-end">
                  Score
                  {sortField === "onpage_score" && (
                    sortDirection === "asc" ? <ArrowUp className="ml-1 h-4 w-4" /> : <ArrowDown className="ml-1 h-4 w-4" />
                  )}
                </div>
              </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {currentPageData.length > 0 ? (
              currentPageData.map((page, index) => (
                <TableRow key={index} className="hover:bg-gray-50">
                  <TableCell className="font-medium max-w-[300px] truncate">
                    <div className="flex items-center space-x-2">
                      <span className="truncate">{page.url}</span>
                      <a
                        href={page.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-500 hover:text-blue-700"
                      >
                        <ExternalLink className="h-4 w-4" />
                      </a>
                    </div>
                    {page.checks?.canonical?.status === "warning" && (
                      <div className="text-xs text-amber-600 mt-1 flex items-center">
                        <Info className="h-3 w-3 mr-1" />
                        {page.checks.canonical.value ? 
                          `Canonical: ${page.checks.canonical.value}` : 
                          "Missing canonical tag"}
                      </div>
                    )}
                  </TableCell>
                  <TableCell>
                    <Badge 
                      variant={page.status_code === 200 ? "default" : 
                             page.status_code >= 300 && page.status_code < 400 ? "outline" :
                             "destructive"}
                    >
                      {page.status_code}
                    </Badge>
                    {page.checks?.is_redirect && (
                      <div className="text-xs text-gray-500 mt-1">Redirect</div>
                    )}
                  </TableCell>
                  <TableCell className="max-w-[300px]">
                    <div className="truncate">
                      {page.meta?.title || "No title"}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {page.meta?.title ? 
                        `${page.meta.title.length} chars` : 
                        <span className="text-amber-600">Missing title</span>}
                    </div>
                    {page.meta?.description && (
                      <TooltipProvider>
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="text-xs text-gray-500 mt-1 cursor-help">
                              Description: {page.meta.description.length} chars
                            </div>
                          </TooltipTrigger>
                          <TooltipContent>
                            <p className="max-w-xs">{page.meta.description}</p>
                          </TooltipContent>
                        </Tooltip>
                      </TooltipProvider>
                    )}
                  </TableCell>
                  <TableCell>
                    <div>
                      {page.meta?.content?.plain_text_word_count || "N/A"}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      H1: {page.meta?.h1?.length || 0}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      Links: {(page.internal_links_count || 0) + (page.external_links_count || 0)}
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <Badge variant={page.onpage_score && page.onpage_score > 80 ? "default" : 
                                   page.onpage_score && page.onpage_score > 60 ? "outline" : 
                                   "destructive"}>
                      {page.onpage_score ? page.onpage_score.toFixed(1) : "N/A"}
                    </Badge>
                    {page.checks?.meta_robots?.value && (
                      <div className="text-xs text-gray-500 mt-1">
                        {page.checks.meta_robots.value}
                      </div>
                    )}
                  </TableCell>
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={5} className="text-center py-6">
                  No pages match your search criteria
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </ScrollArea>
      {totalPages > 1 && (
        <div className="p-4 border-t">
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  className={currentPage === 1 ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
              
              {paginationItems}
              
              <PaginationItem>
                <PaginationNext 
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  className={currentPage === totalPages ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </Card>
  )
}
