import { getBaseUrl } from "./utils"

// Function to start a full site audit
export async function startFullSiteAudit(target: string, options: any = {}) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Starting full site audit for: ${target}`)
    console.log(`With options:`, options)

    const requestBody = {
      target,
      max_crawl_pages: options.max_crawl_pages || 100,
      max_crawl_depth: options.max_crawl_depth || 3,
    }

    const response = await fetch(`${baseUrl}/api/seo-audit/start-site-audit`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error starting site audit: ${response.status}`, errorText)
      throw new Error(`Error starting site audit: ${response.status}`)
    }

    const data = await response.json()
    console.log("Site audit started:", data)

    return data
  } catch (error) {
    console.error("Error starting site audit:", error)
    throw error
  }
}

// Function to check task status
export async function checkTaskStatus(taskId: string) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Checking status for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/check-task-status?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error checking task status: ${response.status}`, errorText)
      throw new Error(`Error checking task status: ${response.status}`)
    }

    const data = await response.json()
    console.log("Task status:", data)

    return data
  } catch (error) {
    console.error("Error checking task status:", error)
    throw error
  }
}

// Function to get pages data
export async function getTaskPages(taskId: string, limit: number = 100, offset: number = 0, maxPages: number = 100) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting pages for task ID: ${taskId}, limit: ${limit}, offset: ${offset}, maxPages: ${maxPages}`)
    
    // Add query parameters for limit, offset, and maxPages
    const url = `${baseUrl}/api/seo-audit/get-pages?taskId=${encodeURIComponent(taskId)}&limit=${limit}&offset=${offset}&maxPages=${maxPages}`
    const response = await fetch(url)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting task pages: ${response.status}`, errorText)
      throw new Error(`Error getting task pages: ${response.status}`)
    }

    const data = await response.json()
    console.log("Task pages response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted pages result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting task pages:", error)
    return []
  }
}

// Function to get duplicate tags data
export async function getTaskDuplicateTags(taskId: string) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting duplicate tags for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-duplicate-tags?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting duplicate tags: ${response.status}`, errorText)
      throw new Error(`Error getting duplicate tags: ${response.status}`)
    }

    const data = await response.json()
    console.log("Duplicate tags response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted duplicate tags result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting duplicate tags:", error)
    return []
  }
}

// Function to get links data
export async function getTaskLinks(taskId: string) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting links for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-links?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting links: ${response.status}`, errorText)
      throw new Error(`Error getting links: ${response.status}`)
    }

    const data = await response.json()
    console.log("Links response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted links result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting links:", error)
    return []
  }
}

// Function to get non-indexable pages data
export async function getTaskNonIndexable(taskId: string) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting non-indexable pages for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-non-indexable?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting non-indexable pages: ${response.status}`, errorText)
      throw new Error(`Error getting non-indexable pages: ${response.status}`)
    }

    const data = await response.json()
    console.log("Non-indexable pages response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted non-indexable pages result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting non-indexable pages:", error)
    return []
  }
}

// Function to get duplicate content data
export async function getTaskDuplicateContent(taskId: string) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting duplicate content for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-duplicate-content?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting duplicate content: ${response.status}`, errorText)
      throw new Error(`Error getting duplicate content: ${response.status}`)
    }

    const data = await response.json()
    console.log("Duplicate content response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted duplicate content result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting duplicate content:", error)
    return []
  }
}

// Function to get errors data
export async function getTaskErrors(taskId: string, options: any = {}) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting errors for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-errors?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting task errors: ${response.status}`, errorText)
      throw new Error(`Error getting task errors: ${response.status}`)
    }

    const data = await response.json()
    console.log("Errors response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted errors result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting task errors:", error)
    return []
  }
}

// Function to get resources data
export async function getTaskResources(taskId: string, options: any = {}) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting resources for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-resources?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting task resources: ${response.status}`, errorText)
      throw new Error(`Error getting task resources: ${response.status}`)
    }

    const data = await response.json()
    console.log("Resources response:", JSON.stringify(data).substring(0, 500) + "...")

    // Extract the result from the response
    if (data.tasks && data.tasks.length > 0 && data.tasks[0].result && data.tasks[0].result.length > 0) {
      const result = data.tasks[0].result
      console.log("Extracted resources result:", JSON.stringify(result).substring(0, 500) + "...")
      return result
    }

    return []
  } catch (error) {
    console.error("Error getting task resources:", error)
    return []
  }
}

// Function to get task summary
export async function getTaskSummary(taskId: string) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Getting summary for task ID: ${taskId}`)
    const response = await fetch(`${baseUrl}/api/seo-audit/get-summary?taskId=${encodeURIComponent(taskId)}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error getting task summary: ${response.status}`, errorText)

      // Return a default summary instead of throwing
      return {
        crawl_progress: "in_progress",
        crawl_status: {
          status_code: 2,
          status_message: "In progress",
          max_crawl_pages: 0,
          pages_in_queue: 0,
          pages_crawled: 0,
        },
        domain_info: {
          name: taskId.split("_")[0] || "Unknown Domain",
        },
        pages_crawled: 0,
        pages_count: 0,
        page_metrics: {
          broken_resources: 0,
          broken_links: 0,
          duplicate_title: 0,
          duplicate_description: 0,
          duplicate_content: 0,
          no_description: 0,
          no_title: 0,
          title_too_long: 0,
          title_too_short: 0,
          description_too_long: 0,
          description_too_short: 0,
          low_content_rate: 0,
          small_page_size: 0,
          large_page_size: 0,
          slow_page: 0,
          no_h1: 0,
          too_many_h1: 0,
          https_to_http: 0,
          canonical_to_non_canonical: 0,
          non_canonical_to_canonical: 0,
          no_image_alt: 0,
          no_image_title: 0,
          broken_image: 0,
          irrelevant_meta_keywords: 0,
          irrelevant_description: 0,
          irrelevant_title: 0,
          has_render_blocking_resources: 0,
          high_loading_time: 0,
          high_waiting_time: 0,
          high_response_time: 0,
          low_word_count: 0,
          high_word_count: 0,
          low_text_html_ratio: 0,
          has_meta_refresh: 0,
          has_render_blocking_resources: 0,
          has_sitemap: 0,
          has_robots_txt: 0,
          has_microdata: 0,
          has_open_graph: 0,
          has_twitter_card: 0,
          has_amp: 0,
          has_favicon: 0,
          has_schema_org: 0,
          has_self_canonical: 0,
          has_canonical: 0,
          has_hreflang: 0,
          has_html_lang: 0,
          has_html_charset: 0,
          has_html_doctype: 0,
          has_html_title: 0,
          has_html_description: 0,
          has_html_h1: 0,
          has_html_h2: 0,
          has_html_h3: 0,
          has_html_h4: 0,
          has_html_h5: 0,
          has_html_h6: 0,
          has_html_image: 0,
          has_html_image_alt: 0,
          has_html_image_title: 0,
          has_html_form: 0,
          has_html_iframe: 0,
          has_html_script: 0,
          has_html_style: 0,
          has_html_link: 0,
          has_html_meta: 0,
          has_html_noscript: 0,
          has_html_object: 0,
          has_html_embed: 0,
          has_html_param: 0,
          has_html_video: 0,
          has_html_audio: 0,
          has_html_track: 0,
          has_html_canvas: 0,
          has_html_svg: 0,
          has_html_math: 0,
          has_html_details: 0,
          has_html_summary: 0,
          has_html_dialog: 0,
          has_html_template: 0,
          has_html_slot: 0,
          has_html_custom_element: 0,
        },
      }
    }

    const data = await response.json()
    console.log("Task summary response:", JSON.stringify(data).substring(0, 500) + "...")

    return data
  } catch (error) {
    console.error("Error getting task summary:", error)
    return {
      crawl_progress: "error",
      crawl_status: {
        status_code: 3,
        status_message: "Error",
        max_crawl_pages: 0,
        pages_in_queue: 0,
        pages_crawled: 0,
      },
      domain_info: {
        name: taskId.split("_")[0] || "Unknown Domain",
      },
    }
  }
}

// Function to run an instant page audit
export async function runInstantPageAudit(url: string, options: any = {}) {
  try {
    const baseUrl = getBaseUrl()
    console.log(`Running instant page audit for: ${url}`)
    
    const response = await fetch(`${baseUrl}/api/seo-audit/instant-page-audit?url=${encodeURIComponent(url)}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(options),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`Error running instant page audit: ${response.status}`, errorText)
      throw new Error(`Error running instant page audit: ${response.status}`)
    }

    const data = await response.json()
    console.log("Instant page audit completed successfully")

    return data
  } catch (error) {
    console.error("Error running instant page audit:", error)
    throw error
  }
}
